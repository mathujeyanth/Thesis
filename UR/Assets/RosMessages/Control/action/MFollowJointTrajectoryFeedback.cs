//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Control
{
    public class MFollowJointTrajectoryFeedback : Message
    {
        public const string RosMessageName = "control_msgs/FollowJointTrajectory";

        public MHeader header;
        public string[] joint_names;
        public Trajectory.MJointTrajectoryPoint desired;
        public Trajectory.MJointTrajectoryPoint actual;
        public Trajectory.MJointTrajectoryPoint error;

        public MFollowJointTrajectoryFeedback()
        {
            this.header = new MHeader();
            this.joint_names = new string[0];
            this.desired = new Trajectory.MJointTrajectoryPoint();
            this.actual = new Trajectory.MJointTrajectoryPoint();
            this.error = new Trajectory.MJointTrajectoryPoint();
        }

        public MFollowJointTrajectoryFeedback(MHeader header, string[] joint_names, Trajectory.MJointTrajectoryPoint desired, Trajectory.MJointTrajectoryPoint actual, Trajectory.MJointTrajectoryPoint error)
        {
            this.header = header;
            this.joint_names = joint_names;
            this.desired = desired;
            this.actual = actual;
            this.error = error;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            
            listOfSerializations.Add(BitConverter.GetBytes(joint_names.Length));
            foreach(var entry in joint_names)
                listOfSerializations.Add(SerializeString(entry));
            listOfSerializations.AddRange(desired.SerializationStatements());
            listOfSerializations.AddRange(actual.SerializationStatements());
            listOfSerializations.AddRange(error.SerializationStatements());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            
            var joint_namesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.joint_names= new string[joint_namesArrayLength];
            for(var i = 0; i < joint_namesArrayLength; i++)
            {
                var joint_namesStringBytesLength = DeserializeLength(data, offset);
                offset += 4;
                this.joint_names[i] = DeserializeString(data, offset, joint_namesStringBytesLength);
                offset += joint_namesStringBytesLength;
            }
            offset = this.desired.Deserialize(data, offset);
            offset = this.actual.Deserialize(data, offset);
            offset = this.error.Deserialize(data, offset);

            return offset;
        }

        public override string ToString()
        {
            return "MFollowJointTrajectoryFeedback: " +
            "\nheader: " + header.ToString() +
            "\njoint_names: " + System.String.Join(", ", joint_names.ToList()) +
            "\ndesired: " + desired.ToString() +
            "\nactual: " + actual.ToString() +
            "\nerror: " + error.ToString();
        }
    }
}

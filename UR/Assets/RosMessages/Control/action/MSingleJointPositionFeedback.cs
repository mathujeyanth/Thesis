//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Control
{
    public class MSingleJointPositionFeedback : Message
    {
        public const string RosMessageName = "control_msgs/SingleJointPosition";

        public MHeader header;
        public double position;
        public double velocity;
        public double error;

        public MSingleJointPositionFeedback()
        {
            this.header = new MHeader();
            this.position = 0.0;
            this.velocity = 0.0;
            this.error = 0.0;
        }

        public MSingleJointPositionFeedback(MHeader header, double position, double velocity, double error)
        {
            this.header = header;
            this.position = position;
            this.velocity = velocity;
            this.error = error;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.position));
            listOfSerializations.Add(BitConverter.GetBytes(this.velocity));
            listOfSerializations.Add(BitConverter.GetBytes(this.error));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.position = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.velocity = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.error = BitConverter.ToDouble(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "MSingleJointPositionFeedback: " +
            "\nheader: " + header.ToString() +
            "\nposition: " + position.ToString() +
            "\nvelocity: " + velocity.ToString() +
            "\nerror: " + error.ToString();
        }
    }
}

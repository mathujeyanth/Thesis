//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Moveit
{
    public class MCartesianTrajectory : Message
    {
        public const string RosMessageName = "moveit_msgs/CartesianTrajectory";

        //  This message describes the trajectory of a tracked frame in task-space
        public MHeader header;
        //  The name of the Cartesian frame being tracked with respect to the base frame provided in header.frame_id
        public string tracked_frame;
        public MCartesianTrajectoryPoint[] points;

        public MCartesianTrajectory()
        {
            this.header = new MHeader();
            this.tracked_frame = "";
            this.points = new MCartesianTrajectoryPoint[0];
        }

        public MCartesianTrajectory(MHeader header, string tracked_frame, MCartesianTrajectoryPoint[] points)
        {
            this.header = header;
            this.tracked_frame = tracked_frame;
            this.points = points;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(SerializeString(this.tracked_frame));
            
            listOfSerializations.Add(BitConverter.GetBytes(points.Length));
            foreach(var entry in points)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            var tracked_frameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.tracked_frame = DeserializeString(data, offset, tracked_frameStringBytesLength);
            offset += tracked_frameStringBytesLength;
            
            var pointsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.points= new MCartesianTrajectoryPoint[pointsArrayLength];
            for(var i = 0; i < pointsArrayLength; i++)
            {
                this.points[i] = new MCartesianTrajectoryPoint();
                offset = this.points[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "MCartesianTrajectory: " +
            "\nheader: " + header.ToString() +
            "\ntracked_frame: " + tracked_frame.ToString() +
            "\npoints: " + System.String.Join(", ", points.ToList());
        }
    }
}

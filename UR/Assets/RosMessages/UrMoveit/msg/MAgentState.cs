//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.UrMoveit
{
    public class MAgentState : Message
    {
        public const string RosMessageName = "ur_moveit/AgentState";

        public MHeader Header;
        public double grip;
        public Geometry.MVector3 gripper2target_position;
        public Geometry.MQuaternion gripper2target_rotation;
        public Geometry.MVector3 gripper_position;
        public Geometry.MQuaternion gripper_rotation;
        public Geometry.MVector3 linear_velocity;
        public Geometry.MQuaternion angular_velocity;

        public MAgentState()
        {
            this.Header = new MHeader();
            this.grip = 0.0;
            this.gripper2target_position = new Geometry.MVector3();
            this.gripper2target_rotation = new Geometry.MQuaternion();
            this.gripper_position = new Geometry.MVector3();
            this.gripper_rotation = new Geometry.MQuaternion();
            this.linear_velocity = new Geometry.MVector3();
            this.angular_velocity = new Geometry.MQuaternion();
        }

        public MAgentState(MHeader Header, double grip, Geometry.MVector3 gripper2target_position, Geometry.MQuaternion gripper2target_rotation, Geometry.MVector3 gripper_position, Geometry.MQuaternion gripper_rotation, Geometry.MVector3 linear_velocity, Geometry.MQuaternion angular_velocity)
        {
            this.Header = Header;
            this.grip = grip;
            this.gripper2target_position = gripper2target_position;
            this.gripper2target_rotation = gripper2target_rotation;
            this.gripper_position = gripper_position;
            this.gripper_rotation = gripper_rotation;
            this.linear_velocity = linear_velocity;
            this.angular_velocity = angular_velocity;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(Header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.grip));
            listOfSerializations.AddRange(gripper2target_position.SerializationStatements());
            listOfSerializations.AddRange(gripper2target_rotation.SerializationStatements());
            listOfSerializations.AddRange(gripper_position.SerializationStatements());
            listOfSerializations.AddRange(gripper_rotation.SerializationStatements());
            listOfSerializations.AddRange(linear_velocity.SerializationStatements());
            listOfSerializations.AddRange(angular_velocity.SerializationStatements());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.Header.Deserialize(data, offset);
            this.grip = BitConverter.ToDouble(data, offset);
            offset += 8;
            offset = this.gripper2target_position.Deserialize(data, offset);
            offset = this.gripper2target_rotation.Deserialize(data, offset);
            offset = this.gripper_position.Deserialize(data, offset);
            offset = this.gripper_rotation.Deserialize(data, offset);
            offset = this.linear_velocity.Deserialize(data, offset);
            offset = this.angular_velocity.Deserialize(data, offset);

            return offset;
        }

        public override string ToString()
        {
            return "MAgentState: " +
            "\nHeader: " + Header.ToString() +
            "\ngrip: " + grip.ToString() +
            "\ngripper2target_position: " + gripper2target_position.ToString() +
            "\ngripper2target_rotation: " + gripper2target_rotation.ToString() +
            "\ngripper_position: " + gripper_position.ToString() +
            "\ngripper_rotation: " + gripper_rotation.ToString() +
            "\nlinear_velocity: " + linear_velocity.ToString() +
            "\nangular_velocity: " + angular_velocity.ToString();
        }
    }
}
